classType components.OnOff
blockdiagramSpecification Main {
	methodBody onoff {
		outPin active {
			connection_8, connection_16
		}
	}
	greater at (221, 66) {
		inPin connection_7
		inPin connection_18
		outPin {
			connection_20
		}
	}
	simpleIdentifier components.Globals.acc_status at (341, 185) {
		label at (0, -1)
		inPin connection_15
		outPin sequenceCall {
			inPin connection_14 {
				bendpoints (0, 20), (-20, 20)
			}
		}
	}
	methodArgumentIdentifier onoff.v at (51, 65) {
		label at (0, -1)
		outPin {
			connection_21, connection_7
		}
		sequenceCall {
			inPin
		}
	}
	methodArgumentIdentifier onoff.request at (461, 125) {
		label at (0, -1)
		outPin {
			connection_13
		}
		sequenceCall {
			inPin
		}
	}
	ifElse at (331, 91) {
		inPin connection_19
		ifControlFlowOutPin {
			connection_12
		}
		elseControlFlowOutPin {
			connection_14
		}
		sequenceCall {
			inPin connection_8
		}
	}
	simpleIdentifier components.Globals.acc_status at (651, 125) {
		label at (0, -1)
		inPin connection_13
		outPin sequenceCall at (-20, -14) {
			inPin connection_12 {
				bendpoints (130, 0), (130, 20)
			}
		}
	}
	literal Boolean "false" at (231, 183) size (49, 0) {
		outPin {
			connection_15
		}
	}
	return at (351, 295) {
		label at (0, 0)
		inPin connection_17
		sequenceCall {
			inPin connection_16
		}
	}
	simpleIdentifier components.Globals.acc_status at (171, 295) {
		label at (0, -1)
		inPin outPin {
			connection_17
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier interfaces.Limits_Config.minSpeed at (151, 85) {
		label at (0, -1)
		outPin {
			connection_18
		}
		sequenceCall {
			inPin
		}
	}
	and at (281, 86) {
		inPin connection_20 {
			bendpoints (20, 0)
		}
		inPin connection_23 {
			bendpoints (40, 0), (40, -30)
		}
		outPin {
			connection_19
		}
	}
	less at (161, 126) {
		inPin connection_21 {
			bendpoints (40, 0), (40, 60)
		}
		inPin connection_22
		outPin {
			connection_23
		}
	}
	simpleIdentifier interfaces.Limits_Config.maxSpeed at (81, 145) {
		label at (0, -1)
		outPin {
			connection_22
		}
		sequenceCall {
			inPin
		}
	}
}